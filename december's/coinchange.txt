Aamdani, Atthanni, Kharcha Rupaiya
Max. score: 100
Problem Statement-

You are working as the cashier in “Babaji Thullu da Dhaba” , and you have different types of coins available to you in infinite quantities. The value of each coin is already given. Can you determine the number of ways of making change for a particular number of units using the given types of coins?

For example, if you have 4 types of coins, and the value of each type is given as 5, 2, 1, 3 respectively, you can make change for 3 units in three ways: {1,1,1} {1,2},and {3} .

Function Description -

The function must return an integer denoting the number of ways to make change. It has the following parameter(s):

n: an integer, the amount to make change for

c: an array of integers representing available denominations


 

Input Format-

The first line contains two space-separated integers describing the respective values of n and m, where:

n is the number of units.

m is the number of coin types.

The second line contains space-separated integers describing the respective values of each coin type : C = [ C[0], C[1] , . . . C[m-1] ]

(the list of distinct coins available in infinite amounts).

Constraints-

1 <= C[i] <= 50

1 <= n <= 250

1 <= m <= 50

Each C[i] is guaranteed to be distinct.

Output Format-

Print a long integer denoting the number of ways we can get a sum of n from the given infinite supply of m types of coins.

SAMPLE INPUT 
4 3
1 2 3
SAMPLE OUTPUT 
4
Explanation
There are four ways to make change for n =4 units using coins with values given by C= [1,2,3] :

1) {1,1,1,1}

2) {1,1,2}

3) {2,2}

4) {1,3}

Thus, we print 4 as our answer.

Similarly, there are five ways to make change for n=10 units using coins with values given by C=[ 2,5,3,6], suppose.

1) {2,2,2,2,2}

2) {2,2,3,3}

3) {2,2,6}

4) {2,3,5}

5) {5,5}

Thus, we print 5 as our answer.

// Sample code to perform I/O:
#include <stdio.h>

int count(int s[], int m, int n){
if(n==0)
return 1;
if(n<0)
return 0;
if(m<=0&&n>=1)
return 0;
return count(s,m-1,n)+count(s,m,n-s[m-1]);
}


int main(){
	int n;
	int m;
	scanf("%d", &n);              			// Reading input from STDIN
	scanf("%d", &m);              			// Reading input from STDIN
	int arr[m];
	for(int i=0;i<m;i++){
		scanf("%d", &arr[i]);
	}
	printf("%d",count(arr,m,n));
	return 0;

}

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail


// Write your code here








int count( int S[], int m, int n ) 
{ 
    // table[i] will be storing the number of solutions for 
    // value i. We need n+1 rows as the table is constructed 
    // in bottom up manner using the base case (n = 0) 
    int table[n+1]; 
  
    // Initialize all table values as 0 
    memset(table, 0, sizeof(table)); 
  
    // Base case (If given value is 0) 
    table[0] = 1; 
  
    // Pick all coins one by one and update the table[] values 
    // after the index greater than or equal to the value of the 
    // picked coin 
    for(int i=0; i<m; i++) 
        for(int j=S[i]; j<=n; j++) 
            table[j] += table[j-S[i]]; 
  
    return table[n]; 
} 